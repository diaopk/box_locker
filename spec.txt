* Equipments
    - Camera
    - LCD Srceen
    - Setp motor
    - A box

* Python modules and libraries 
    UI:
        - Tkinter(a general python graphical module to display keypad and 
          other UIs)
        - tkFont(a python module for changing text font for Tkinter)
        - ImageTk, Image from PIL(python modules to retrive an image as as
    
    Camera:
        - Picamera(a python module for handling reasberry pi camera module)

    Email:
        - smtplib(a python module to build service and send emails)
        - emsil.message_from_string(take a string object to form a message 
          object
        - email.MIMEMultipart
        - email.MIMEText
        - email.MIMEImage
        - poplib.POP3_SSL (provide pop3 mail connection)

    Regular Expression:
        - re.compile (form a compiled regular expression)
    
    Step motor:
        - RPI.GPIO

    hash function
        - hashlib.sha1 (encrpt the pin)
        - uuid.uuid4 (generate random numbers)

    Others:
        - os(obtain operating system info)
        - re(for simple regular expression uses)
        - datetime(to get the system time)

* Replace physical keypad with vitrual keypad
    In the group project, we use LCD Screen to display the keypad instead 
    of physical keypad. To do this, we use one of the python module called
    TKinter to create a User interface on the screen.

* Expected demo
    A box with LCD screen and a camera on the top of the box can capture 
    whoever try to enter a pin and open the box. If someone try to open the
    the box with a wrong pin, s/he will be captured as the piture that will
    be displaied on the LCD and sent to the admin through Email. People 
    only can enter pin on the LCD.

* Jobs
    1. Build or program a UI
    2. Deal with stuff on Camera
    3. Deal with stuff on Email
    4. Make the camera and Email working together
    5. Deal with stuff on setp motor
    6. Make all of them working together
    7. additional jobs like mysql, secure pin may be done later..

* Details
    1. Build or program a UI
        - Use Tkinter python module
        - Description
            This script creates a keypad that displaies 0-9 number keys,
            cencel button, enter button, browse button and forget button

            Here are what 4 functional buttons are for
                - cencel button for removing digits entered
                - enter button for confirming pin entered to open the box
                - browse button for browsing the photo library
                - forget button for reset the pin if admin forgets it

            In clicking 
                - cencel button, no matter how many digits inputed, the 
                  cencel button removes all of them
                - enter button, if the pin entered is correct then open
                  the box. If the pin is incorrect, the program invokes 
                  the take_photo() method in the pc.py for capturing 
                  the one who tries to open the box with the wrong pin,
                  and sends admin an email with that photo
                - browse button, open a toplevel window to display all 
                  photos in the './test_picamera' directory
                - forget button, ...

        - keypad.py
            - class Application
                - attributes
                    - f* (Frame widgets)
                    - e* (Entry widgets)
                    - btn* (Button widgets)
                    - cencel, enter, browse, forget and change(5 buttons)
                    - server (Emailer.Email object)
                    - photo_manager (pc.Photo_Manager object)
                    - pin (password.Pin object)

                - methods
                    - btn_enter()
                       Check the pin. If correct open the box. If not,
                       photo_manager calls the take_photo() method and call
                       the show_topwin() method to show the photo it took
                    - btn_browse()
                        Call the show_topwin() method with an argument 
                        process='browse'
                    - btn_forget()
                        call the pin.pin_forget() to generate a new pin
                    - btn_change()
                        Receive a new pin from emails and set this pin as
                        the new pin
                    - btn_cencel(h)
                        Delete values in Entry h
                    - show_topwin(photo=None, **kwarg)
                        Show the toplevel window depend on what the kwarg
                        is. If process=='takephoto' then show the toplevel
                        window with the photo and destroy the window after
                        3 seconds.
                        If process=='browse' then show the toplevel window
                        with all photos in the './test_picamera/' directory
                    - input(e, digit)
                        Insert digit into Entry e
                    - entries_checker(digit=None, **process)
                        proecess operations depended on the **process
                        process == input then input digit for the entry
                        process == delete then remove all digits
                    - screen_width()
                        Retuen the width of the screen
                    - screen_height()
                        Return the height of the screen
        - ...

    2. Email stuff
        - Use email and smtplib together to make it happen
        - Desciprtion
            This script defines an Email object for constructing the email
            content and sending an email. After finishing constructionof an
            Email object, call send() method to send emails and call
            receive() to receive latest emails.

        - Example
            import pc
            photo = pc.Photo(path, time)
            em = Email()
            em.send('example@example.com', photo=photo)
            print em.receive()

        - Emailer.py
            - class Email
                - attributes: 
                    - __admin_addr (administrator's address)
                    - __pass (administrator's email password)
                    - to_addr_caroline (the receiver's email address)
                    - to_addr_junli (...)
                    - to_addr_louise (...)
                    - msg (the object holds multiple content about the 
                      email to be sent, including sender, receiver, subject
                      and email content itself)
                - method:
                    - send(photo=None, to_addr=None, body=None)
                        - this method is for sending an email to the
                          to_addr. If to_addr is not specified, then send
                          to the default address.

                    - receive(index=None)
                        - this method is for receiving the mail at given 
                          index and return value. If index is None, then 
                          return the value of the latest mail

        - ... 

    3. Camera stuff
        - Use picamera module
        - Description
            This script defines a Photo_Manager object and a Photo object.
            The Photo_Manager takes no arguments to create an instance. It
            holds a list of Photo objects in the './test_picamera/' 
            directory. It can represent a photo object by using some 
            methods like first() and tail(). For example, photoManager.first() gets the first photo object of the photo object's list. photoManager.first().get_path() returns the path to the first photo object.

            The Photo object takes the path to the photo and datetime the 
            photo takes as arguments.

        - Example
            photoManager = Photo_Manager()
            photoManager.taek_photo() # to take a photo and store it
            photoManager.first() # get the first photo object
            photoManager.next().get_path() # get the the path to the next photo object
            photoManager.get_current_photo() # get the current photo object, which is photo_seq[1]

        - pc.py
            - class Photo_Manager
                - attributes
                    - camaera (PiCamera instance)
                    - photo_seq (a list of photo objects)
                    - index (the current index in the photo_seq)
                    - current_photo (the current photo object in the photo_seq
                
                - methods
                    - __iter__()
                        Return this Photo_Manager
                    - __browse()
                        return every image in the './test_picamera/' 
                        directory in the format of jpg or png
                    - get_photos()
                        Return photo_seq
                    - get_current_photo()
                        Return current photo object
                    - get_index()
                        Return current index in the photo_seq
                    - take_photo()
                        Take a photo and store this photo as a photo 
                        object at the first of the photo_seq
                    - next()
                        Return next photo object set index and 
                        current_photo to this photo object
                    - up()
                        Return the previous photo object and set index and
                        current_photo to this photo object
                    - first()
                        Return the first photo object and set index and 
                        current_photo to this photo object
                    - last()
                        Return the last photo object and set index and 
                        current_photo to this photo object
            
            - class Photo
                - attributes
                    - path (the path to this photo object)
                    - datetime (the datetime this photo takes)
                
                - methods
                    - get_datetime()
                        Return the datetime
                    - get_path()
                        Return the path
        - ...
    
    4. Pin(or password) stuff
        - Use uuid.uuid4(), hashlib.sha1(), random.randint(), Emailer.Email()
        - Description
            This script defines a Pin class to store the pin or password

        - Example
            pin = Pin()
            pin.pin_forget() # generate a random pin
            pin.pin_create(pswd=1234, change=True) # change the pin to 1234
            # check the pin and return true or false
            if pin.pin_check(1234):
                print 'yes'
            else:
                print 'no'

        - password.py
          Pin class
            - attributes
                - __pin (the pin itself)
                - __salt (the salt value for hashing with the pin value 
                  together)
            
            - methods
                - __salt_create()
                    create the random value using uuid.uuid4().hex
                - pin_create(pswd=None, change=None)
                    if pswd and change specify at the same time, go for 
                    changing pin process. pswd is the pin and change is
                    the boolean value(usually specify True to change).
                    Return then a new hashed value using hashlib.sha1()
                    if not specify, return hashed value for the default pin
                - pin_forget()
                    Generate the random pin and send emails to inform 
                    admins
                - pin_check(input_pswd)
                    return boolean value to indicate if the input_pswd is
                    correct or not

    5. Step motor stuff
        - Use RPI.GPIO module.
        - Description
            This script defines a Motor class to work with the stepper 
            moter. There are two methods to process the operations, open()
            and close()

        - Example
            motor = Motor()
            motor.open() # turn 90 degree
            motor.close() # turn back 90 degree

        - class Motor
            - attributes
                - pins (list to store 4 pyhical pins on the board)
                - seq (a sequence to active the pin)
                - waittime (the wait time bewteen two pins)
                
            - set_waittime(t)
                Set the wait time

            - open() : turn 90 degree
            - close() : turn back 90 degree

* Reference
    1. Pthon Regular Expreesion Documentation: https://docs.python.org/2/howto/regex.html
    2. Python Picamera Documentation: https://www.raspberrypi.org/documentation/usage/camera/python/README.md
    3. Python uuid4 module Documentation: https://docs.python.org/2/library/uuid.html#uuid.uuid4
    4. Python GUI Library, Tkinter 8.5 reference: http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html
    5. Python email Library Documentation: https://docs.python.org/2/library/email.html
    6. Python RPI.GPIO WIKI: https://sourceforge.net/p/raspberry-gpio-python/wiki/Home/
    7. Salted Password Hashing ways: https://crackstation.net/hashing-security.htm
